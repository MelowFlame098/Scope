# FinScope Log Rotation Configuration
# This file configures log rotation for all FinScope application logs

# Global settings
dateext
dateformat -%Y%m%d-%s
compress
delaycompress
missingok
notifempty
create 644 root root
rotate 30
maxage 90

# Backend application logs
/logs/backend/*.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    notifempty
    create 644 root root
    copytruncate
    
    # Post-rotation script
    postrotate
        # Send USR1 signal to application if needed
        # pkill -USR1 -f "uvicorn main:app" || true
        echo "$(date): Backend logs rotated" >> /logs/backend/rotation.log
    endscript
    
    # Size-based rotation as backup
    size 100M
    
    # Keep logs for 30 days
    maxage 30
}

# Nginx access logs
/logs/nginx/access.log {
    daily
    rotate 52
    compress
    delaycompress
    missingok
    notifempty
    create 644 nginx nginx
    sharedscripts
    
    postrotate
        # Reload nginx to reopen log files
        if [ -f /var/run/nginx.pid ]; then
            kill -USR1 `cat /var/run/nginx.pid`
        fi
        echo "$(date): Nginx access logs rotated" >> /logs/nginx/rotation.log
    endscript
    
    # Size-based rotation
    size 500M
    
    # Keep logs for 1 year
    maxage 365
}

# Nginx error logs
/logs/nginx/error.log {
    daily
    rotate 52
    compress
    delaycompress
    missingok
    notifempty
    create 644 nginx nginx
    sharedscripts
    
    postrotate
        if [ -f /var/run/nginx.pid ]; then
            kill -USR1 `cat /var/run/nginx.pid`
        fi
        echo "$(date): Nginx error logs rotated" >> /logs/nginx/rotation.log
    endscript
    
    # Size-based rotation
    size 100M
    
    # Keep error logs for 1 year
    maxage 365
}

# Database logs (if mounted)
/logs/postgres/*.log {
    weekly
    rotate 12
    compress
    delaycompress
    missingok
    notifempty
    create 644 postgres postgres
    copytruncate
    
    postrotate
        echo "$(date): PostgreSQL logs rotated" >> /logs/postgres/rotation.log
    endscript
    
    # Size-based rotation
    size 200M
    
    # Keep logs for 3 months
    maxage 90
}

# Redis logs (if mounted)
/logs/redis/*.log {
    weekly
    rotate 8
    compress
    delaycompress
    missingok
    notifempty
    create 644 redis redis
    copytruncate
    
    postrotate
        echo "$(date): Redis logs rotated" >> /logs/redis/rotation.log
    endscript
    
    # Size-based rotation
    size 50M
    
    # Keep logs for 2 months
    maxage 60
}

# Application-specific logs
/logs/backend/api.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    notifempty
    create 644 root root
    copytruncate
    
    postrotate
        echo "$(date): API logs rotated" >> /logs/backend/rotation.log
    endscript
    
    size 200M
    maxage 30
}

/logs/backend/websocket.log {
    daily
    rotate 14
    compress
    delaycompress
    missingok
    notifempty
    create 644 root root
    copytruncate
    
    postrotate
        echo "$(date): WebSocket logs rotated" >> /logs/backend/rotation.log
    endscript
    
    size 100M
    maxage 14
}

/logs/backend/market_data.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    notifempty
    create 644 root root
    copytruncate
    
    postrotate
        echo "$(date): Market data logs rotated" >> /logs/backend/rotation.log
    endscript
    
    size 150M
    maxage 30
}

/logs/backend/ai_service.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    notifempty
    create 644 root root
    copytruncate
    
    postrotate
        echo "$(date): AI service logs rotated" >> /logs/backend/rotation.log
    endscript
    
    size 100M
    maxage 30
}

# Security and audit logs
/logs/backend/security.log {
    daily
    rotate 90
    compress
    delaycompress
    missingok
    notifempty
    create 644 root root
    copytruncate
    
    postrotate
        echo "$(date): Security logs rotated" >> /logs/backend/rotation.log
    endscript
    
    size 50M
    maxage 90
}

/logs/backend/audit.log {
    daily
    rotate 365
    compress
    delaycompress
    missingok
    notifempty
    create 644 root root
    copytruncate
    
    postrotate
        echo "$(date): Audit logs rotated" >> /logs/backend/rotation.log
    endscript
    
    size 100M
    maxage 365
}

# Error logs (high priority)
/logs/backend/error.log {
    daily
    rotate 60
    compress
    delaycompress
    missingok
    notifempty
    create 644 root root
    copytruncate
    
    postrotate
        echo "$(date): Error logs rotated" >> /logs/backend/rotation.log
        # Optional: Send alert for error log rotation
        # /usr/local/bin/send-alert.sh "Error logs rotated" || true
    endscript
    
    size 50M
    maxage 60
}

# Performance logs
/logs/backend/performance.log {
    weekly
    rotate 12
    compress
    delaycompress
    missingok
    notifempty
    create 644 root root
    copytruncate
    
    postrotate
        echo "$(date): Performance logs rotated" >> /logs/backend/rotation.log
    endscript
    
    size 200M
    maxage 90
}

# Cleanup old rotation logs themselves
/logs/*/rotation.log {
    monthly
    rotate 6
    compress
    delaycompress
    missingok
    notifempty
    create 644 root root
    copytruncate
    
    size 10M
    maxage 180
}